; Standard Library for Lispy

; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; Function Definition
(def {fun} (\ {f b}
  {def (head f) (\ (tail f) b)}
))

; Unpack list for function
(fun {unpack f xs}
  {eval (join (list f) xs)}
)

; Pack list for function
(fun {pack f & xs} {f xs})

; Curried and uncurried calling
(def {uncurry} pack)
(def {curry} unpack)

; Get first, second, or third item of a list
(fun {fst l} { eval (head l) })
(fun {snd l} { eval (head (tail l)) })
(fun {trd l} { eval (head (tail (tail l))) })

; Fold left
(fun {foldl f z l} {
  if (== l nil)
    {z}
    {foldl f (f z (fst l)) (tail l)}
})

; List Length
(fun {len l} {
  foldl (\ {acc _} {+ acc 1}) 0 l
})

; Get Nth item in a list
(fun {nth n l} {
  if (== n 0)
    {fst l}
    {nth (- n 1) (tail l)}
})

; Get last item in a list
(fun {last l} {nth (- (len l) 1) l})

; Take first N items from a list
(fun {take n l} {
  if (== n 0)
    {nil}
    {join (head l) (take (- n 1) (tail l))}
})

; Drop first N items from a list and return the rest
(fun {drop n l} {
  if (== n 0)
    {l}
    {drop (- n 1) (tail l)}
})

; Split list at Nth item
(fun {split n l} {list (take n l) (drop n l)})

; Is element a member of the list?
(fun {elem x l} {
  foldl
    (\ {history member}
      {if (== x member)
        {true}
        {history}})
    false
    l
})

; Apply given function to a list
(fun {map f l} {
  if (== l nil)
    {nil}
    {join
      (list (f (fst l)))
      (map f (tail l))}
})

; Apply filter to list
(fun {filter f l} {
  if (== l nil)
    {nil}
    {join
      (if (f (fst l)) {head l} {nil})
      (filter f (tail l))}
})

; Sum elements of a list
(fun {sum l} {foldl + 0 l})

; Product of a list
(fun {product l} {foldl * 1 l})

; Perform list of instructions in order
(fun {do & l} {
  if (== l nil)
    {nil}
    {last l}
})

; Open new scope
(fun {let b} {
  ((\ {_} b) ())
})

; Logical operators
(fun {not x}   {- 1 x})
(fun {or x y}  {+ x y})
(fun {and x y} {* x y})

; Select statement
(fun {select & cs} {
  if (== cs nil)
    {error "No selection found!"}
    {if (fst (fst cs))
      {snd (fst cs)}
      {unpack select (tail cs)}}
})

; Default case
(def {otherwise} true)

; Day of Month suffix
(fun {month-day-suffix i} {
  select
    {(== i 1) "st"}
    {(== i 2) "nd"}
    {(== i 3) "rd"}
    {otherwise "th"}
})

; Case conditional
(fun {case x & cs} {
  if (== cs nil)
    {error "No case found!"}
    {if (== x (fst (fst cs)))
      {snd (fst cs)}
      {unpack case (join (list x) (tail cs))}}
})

; Weekday enums
(fun {day-name x} {
  case x
    {0 "Monday"}
    {1 "Tuesday"}
    {2 "Wednesday"}
    {3 "Thursday"}
    {4 "Friday"}
    {5 "Saturday"}
    {6 "Sunday"}
})

; Fibonacci
(fun {fib n} {
  select
    {(== n 0) 0}
    {(== n 1) 1}
    {otherwise (+ (fib (- n 1))
                  (fib (- n 2)))}
})

; Modulus operator
(fun {mod n} {
  select
    {(<)}
})

; Textual names for primitive operators
(def {add} +)
(def {sub} -)
(def {mul} *)
(def {div} /)
(def {mod} %)
(def {pow} ^)
